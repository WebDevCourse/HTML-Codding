// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//     1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
//     What is the value of the first triangle number to have over five hundred divisors?

const {swap, getRandomArray, getRandomNumber} = require("./utility");

const nextTriangleNumber = (previousTriangleNumber, indexOfPreviousTriangleNumber) => {
    return previousTriangleNumber + indexOfPreviousTriangleNumber + 1;
};

const numberOfDivisors = (arg) => {
    let acc = 0;
    let divisor = 2;
    while (arg > 1){
        if (arg % divisor === 0) {
            arg = arg / divisor;
            acc++;
        }
        else{
            divisor++;
        }
    }
    return acc + 1; //because of divisor "1" is not natural number and we have to exclude it from algorithm
};

const getFirstTriangleNumberWithNumberOfDivisordGreaterThen = (maxDivisorsNumber) => {
    let currentTriangleNumber = 1;
    let orderOfCurrentTriangleNumber = 1;
    while (numberOfDivisors(currentTriangleNumber) < maxDivisorsNumber) {
        // TODO fix for appropriate number
        currentTriangleNumber = nextTriangleNumber(currentTriangleNumber, orderOfCurrentTriangleNumber++);
    }
    return currentTriangleNumber;
};

console.log(numberOfDivisors(6));

console.log(nextTriangleNumber(3,2));

console.log(getFirstTriangleNumberWithNumberOfDivisordGreaterThen(5));